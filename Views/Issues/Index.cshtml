@using X.PagedList.Mvc.Core;
@using X.PagedList.Mvc.Common;
@using BeetleTracker.Models.Entities;
   
@model X.PagedList.IPagedList<BeetleTracker.Models.Entities.Issue>

@{
    ViewData["Title"] = "Issues";
}

<h1>Issues</h1>

<p>
    <a asp-action="Create">Add New Issue</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.First().Name)
            </th>
            <th>
                @Html.ActionLink("Created", "Index", new { sortBy = ViewBag.CreatedSort })
            </th>
            <th>
                @Html.ActionLink("Updated", "Index", new { sortBy = ViewBag.UpdatedSort })
            </th>
            <th>
                @Html.ActionLink("Reporter", "Index", new { sortBy = ViewBag.ReporterSort })
            </th>
            <th>
                @Html.ActionLink("Status", "Index", new { sortBy = ViewBag.StatusSort })
            </th>
            <th>
                @Html.ActionLink("Priority", "Index", new { sortBy = ViewBag.PrioritySort })
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.ActionLink(item.Name, "Details", new { id = item.Id })
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Created)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Updated)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Reporter)
                </td>
                <td>
                    <span class="badge badge-issue-status @item.Status.GetColorBadge()">
                        <b>@item.Status.GetDescription()</b>
                    </span>
                </td>
                <td>
                    <b>@item.Priority.GetDescription()</b>
                </td>
                <td>
                    @Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
                    @Html.ActionLink("Delete", "Delete", new { id = item.Id })
                </td>
            </tr>
        }
    </tbody>
</table>
@*<div id="Paging" style="text-align:center">*@
@*Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber)
    of @Model.PageCount*@
@Html.PagedListPager(
        Model,
        page => Url.Action("Index", new { page, sortBy = Context.Request.Query["sortBy"]}),
        new PagedListRenderOptionsBase()
        {
            Display = PagedListDisplayMode.IfNeeded,
            LiElementClasses = new[] { "page-item" },
            ContainerDivClasses = new[] { "pagination-sm" },
            PageClasses = new[] { "page-link" }
        })